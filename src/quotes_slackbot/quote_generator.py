import datetime
import logging
from io import BytesIO
from typing import Optional
from urllib.parse import quote_plus

from quotes_slackbot.config import config
from quotes_slackbot.image.assemble import assemble_image_and_text
from quotes_slackbot.ml.glide import run_for_prompt
from quotes_slackbot.ml.gpt3 import query_gpt3
from quotes_slackbot.slack.slack_client import (
    SingleMessageSlackClient,
    slack_markdown_block,
)

logger = logging.getLogger(__name__)


def run(channel_id: Optional[str] = None):
    dt_start = datetime.datetime.now()

    slack = SingleMessageSlackClient(
        token=config.slack_token,
        channel_id=channel_id or config.channel_id,
    )

    if config.send_post_preview:
        slack.put(
            text=config.post_preview,
            blocks=[slack_markdown_block(config.post_text_working)],
        )

    try:

        quote, motive = None, None
        for _ in range(config.gpt3_retries):
            result = query_gpt3(config.gpt3_prompt)
            if config.gpt3_delimiter not in result:
                logger.info(f"Skipping: {result}")
                continue
            parts = result.split(config.gpt3_delimiter)
            if len(parts) == 2 and len(parts[0]) > 15 and len(parts[1]) > 5:
                quote, motive = parts
                break
            else:
                logger.info(f"Skipping: {result}")

        if not quote:
            logger.error("Retries exceeded to obtain quote and motive")
            # TODO handle error
            return

        logger.info(f"quote:   {quote}")
        logger.info(f"motive:  {motive}")

        image = run_for_prompt(motive)

        image_and_quote = assemble_image_and_text(image=image, text=quote)

        slack.delete()
        img_byte_arr = BytesIO()
        image_and_quote.save(img_byte_arr, format="PNG")
        img_byte_arr = img_byte_arr.getvalue()
        blocks = [slack_markdown_block(config.post_text_done)]
        slack.put(file_content=img_byte_arr, text=config.post_preview, blocks=blocks)

        duration = datetime.datetime.now() - dt_start
        duration_str = f"{int(duration.total_seconds() // 60)} min {int(duration.total_seconds()) % 60} s"
        escaped_query = quote_plus(f'"{quote}"')
        url = "https://www.google.com/search?q=" + escaped_query
        details_post = "\n".join(
            [
                "_Quote and image have been generated by neural networks_ ",
                "",
                f"*Image theme*: {motive}",
                "",
                f"*Text quote*: {quote}",
                "",
                f"*Generation time*: {duration_str}",
                "",
                f"*Who said it?* <{url}|Google>",
            ]
        )

        slack.append_to_thread(
            text=config.thread_post_preview, blocks=[slack_markdown_block(details_post)]
        )
    except Exception as e:
        slack.delete()
        logger.exception(e)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    run()
